{
  "name": "prom-client",
  "version": "3.0.4",
  "description": "Client for prometheus",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "eslint --ignore-pattern doc/ --ignore-path .gitignore . && mocha test/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:siimon/prom-client.git"
  },
  "keywords": [
    "Prometheus",
    "Metrics",
    "Client"
  ],
  "author": {
    "name": "Simon Nyberg"
  },
  "license": "Apache 2.0",
  "homepage": "https://github.com/siimon/prom-client",
  "devDependencies": {
    "chai": "^3.4.1",
    "eslint": "^1.10.1",
    "express": "^4.13.3",
    "minami": "^1.1.1",
    "mocha": "^2.3.4",
    "sinon": "^1.17.2"
  },
  "dependencies": {
    "object-hash": "^0.9.2",
    "util-extend": "^1.0.1"
  },
  "readme": "# Prometheus client for node.js [![Build Status](https://travis-ci.org/siimon/prom-client.svg?branch=master)](https://travis-ci.org/siimon/prom-client)\n\nA prometheus client for node.js that supports histogram, gauges and counters.\n\n### Usage\n\nSee example folder for a sample usage. The library does not bundle any web framework, to expose the metrics just return the metrics() function in the registry.\n\n### API\n\n#### Configuration\n\nAll metric types has 2 mandatory parameters, name and help. \n\n#### Counter\n\nCounters go up, and reset when the process restarts.\n\n```\nvar Client = require('prom-client');\nvar counter = new Client.counter('metric_name', 'metric_help');\ncounter.inc(); // Inc with 1\ncounter.inc(10); // Inc with 10\n```\n\n#### Gauge\n\nGauges are similar to Counters but Gauges value can be decreased.\n\n```\nvar Client = require('prom-client');\nvar gauge = new Client.gauge('metric_name', 'metric_help');\ngauge.set(10); // Set to 10\ngauge.inc(); // Inc with 1\ngauge.inc(10); // Inc with 10\ngauge.dec(); // Dec with 1\ngauge.dec(10); // Dec with 10\n```\n\nThere are some utilities for common use cases:\n\n```\ngauge.setToCurrentTime(); // Sets value to current time\n\nvar end = gauge.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Sets value to xhrRequests duration in seconds\n});\n```\n\n#### Histogram\n\nHistograms track sizes and frequency of events.  \n\n**Configuration**  \n\nThe defaults buckets are intended to cover usual web/rpc requests, this can however be overriden.\n```\nvar Client = require('prom-client');\nnew Client.histogram('metric_name', 'metric_help', { \n\tbuckets: [ 0.10, 5, 15, 50, 100, 500 ]\n});\n```\n\nExamples\n\n```\nvar Client = require('prom-client');\nvar histogram = new Client.histogram('metric_name', 'metric_help');\nhistogram.observe(10); // Observe value in histogram\n```\n\nUtility to observe request durations\n```\nvar end = histogram.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Observes the value to xhrRequests duration in seconds\n});\n```\n\n#### Labels \n\nAll metrics take an array as 3rd parameter that should include all supported label keys. There are 2 ways to add values to the labels\n```\nvar Client = require('prom-client');\nvar gauge = new Client.gauge('metric_name', 'metric_help', [ 'method', 'statusCode' ]);\n\ngauge.set({ method: 'GET', statusCode: '200' }, 100); // 1st version, Set value 100 with method set to GET and statusCode to 200\ngauge.labels('GET', '200').set(100); // 2nd version, Same as above\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/siimon/prom-client/issues"
  },
  "_id": "prom-client@3.0.4",
  "_shasum": "3bdd01b6472c932092f5bc923391507fc17da384",
  "_from": "prom-client@^3.0.2",
  "_resolved": "https://registry.npmjs.org/prom-client/-/prom-client-3.0.4.tgz"
}
