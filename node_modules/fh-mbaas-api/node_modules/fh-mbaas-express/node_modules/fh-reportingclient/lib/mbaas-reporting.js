var MBaaSClient = require('fh-mbaas-client');
var URL = require('url');

// In-memory batch to hold the incoming messages
var batch = [];
var batchLimit = 10;
var batchOverflowCount = 0;
var flushTimerInterval = 5*60*1000;
var flushTimer;

var reportingTopic;

var GUID = process.env.FH_INSTANCE;
var DOMAIN = process.env.FH_DOMAIN;
var ENVIRONMENT = process.env.FH_ENV;
var HOST = process.env.FH_MBAAS_HOST;
var ACCESS_KEY = process.env.FH_MBAAS_ENV_ACCESS_KEY;
var API_KEY = process.env.FH_APP_API_KEY;
var PROJECT = process.env.FH_WIDGET;
var PROTOCOL = process.env.FH_MBAAS_PROTOCOL || 'https';


MBaaSReporting.prototype.startFlushTimer = function(){
  var self = this;
  if (!flushTimer){
    flushTimer = setInterval(
      function(){
        self.syncBatch(function(){});
      }, flushTimerInterval);
  }
};

MBaaSReporting.prototype.flushBatch = function(){
  this.syncBatch(function(){});
  this.resetBatch();
};

MBaaSReporting.prototype.acceptMessage = function(topic, msg, cb){
  reportingTopic = topic;
  if (batch.length >= batchLimit){ // Batch can overflow in error scenario
    var self = this;
    this.syncBatch(function(err){
      if (err){
        // Error so overflow batch to save last message
        self.addToBatch(topic, msg);
        batchOverflowCount++;
        return cb(err, { message: 'Error sending message batch to MBaaS. Batch overflowing by '+ batchOverflowCount });
      } else {
        self.startNewBatch(topic, msg);
        return cb(undefined, { message: 'New batch started' });
      }
    });
  } else {
    this.addToBatch(topic, msg);
    return cb(undefined, { message: 'Added to batch' });
  }
};


MBaaSReporting.prototype.syncBatch = function(cb){
  if (batch && batch.length > 0){
    MBaaSClient.initEnvironment(ENVIRONMENT, {
      url: URL.format(PROTOCOL + '://' + HOST),
      accessKey: ACCESS_KEY,
      project: PROJECT,
      app: GUID,
      appApiKey: API_KEY
    });

    // /api/app/:domain/:environment/:projectid/:appid/message/:topic with [] or messages for data (a batch)
    MBaaSClient.app.message.sendbatch({
      'host': HOST,
      'environment': ENVIRONMENT,
      'domain': DOMAIN,
      'data': batch,
      'topic': reportingTopic || 'fhact'
    }, function (err) {
      if (err) {
        return cb(err, { message: 'Error sending message batch to MBaaS' });
      } else {
        return cb(undefined, { message: 'Batch sent to MBaaS' });
      }
    });
  } else {
    return cb(undefined, { message: 'Batch empty...nothing to sync at this time' });
  }
};

MBaaSReporting.prototype.addToBatch = function(topic, msg){
  batch.push(msg);
  if (!flushTimer){
    this.startFlushTimer();
  }
};

MBaaSReporting.prototype.resetBatch = function(){
  batch.length = 0;
  batchOverflowCount = 0;
};

MBaaSReporting.prototype.startNewBatch = function(topic, msg){
  this.resetBatch();
  this.addToBatch(topic, msg);
};

MBaaSReporting.prototype.getBatch = function(){
  return batch;
};

function MBaaSReporting(){}

/** Expose functionality */
module.exports = MBaaSReporting;
