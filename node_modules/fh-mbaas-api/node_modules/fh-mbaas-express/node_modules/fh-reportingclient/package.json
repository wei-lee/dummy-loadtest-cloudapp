{
  "author": {
    "name": "Martin Murphy",
    "email": "martin.murphy@feedhenry.com"
  },
  "name": "fh-reportingclient",
  "keywords": [
    "fh-reporting",
    "feedhenry"
  ],
  "description": "FH Reporting Client",
  "version": "0.3.7",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/fh-reporting.js",
  "scripts": {
    "test": "expresso -I lib"
  },
  "engines": {
    "node": ">=0.4.12"
  },
  "dependencies": {
    "async": "0.1.16",
    "request": "2.9.100",
    "fh-mbaas-client": "0.6.1"
  },
  "man": [
    "./man/fh-reportingclient.1"
  ],
  "license": "Copyright (c) 2014 FeedHenry Ltd, All Rights Reserved.",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-fh-build": "^0.3.0",
    "istanbul": "^0.3.15",
    "turbo-test-runner": "~0.3",
    "proxyquire": "0.4.1",
    "sinon": "^1.17.1"
  },
  "readme": "fh-reportingclient(1) -- The FeedHenry Reporting Client\n===============================================\n\n## DESCRIPTION\n\nThe Feedhenry Reporting Client is a client libray for Node.js applications that allows messages to be sent to a Feedhenry Reporting Server. (Formerly called a Messaging Server)\n\nThere's currently only one function available:\n\n* `logMessage(topic, msg, callback)` - log messages for a particular topic\n\n## Dependencies\n\nThe Reporting Client currently relies on the following being installed on a host:\n\n* node.js\n\n* npm (the Node Package Manager)\n \nThe Reporting Client currently operates it 2 ways:\n\n1. send a message to the Reporting Server for storage. (And eventual aggretation into a metrics report)\n2. save the message in a file. (Which is expected to be batch imported into the Reporting Server, similar to the way that Millicore is currently operating) \n\n## Installation\n\nThe Reporting Client is deployed by adding a dependency to your projects package.json file.\n\n## Running and Configuration  \n\nTo use the Reporting Client you should add a dependency in your project to the latest build of fh-reportingclient.\nWithin the code of your application, require the module, call the constructor - passing appropriate values, then call the `logMessage()` function where you want to log a message.\n\nIf there are errors sending to msgServer, the message will be saved to recoveryfile.  Messages are always sent to msgServer and backupFile.  If any or all of msgServer, recoveryFiles, backupFiles are not present in the config, the library will not attempt to send messages there, e.g. if msgServer is specifed, but not recoveryFiles or backupFiles, then the library will attempt to sen the message to the message server, but not save it to disk. \n\nThe parameters, \"host\" and \"cluster\", must be specified\n\nExample:\n\n    var reporting = require('fh-reporting');\n    var config = {\n      host: \"dub1app1b\",\n      cluster: \"dub1\",\n      msgServer: {\n        logMessageURL: \"http://some_internet_reporting_server_address:443/msg/TOPIC\"\n      },\n      recoveryFiles: {\n        fileName: \"/mnt/some/path/recoveryFiles.log\"\n      },\n      backupFiles: {\n        fileName: \"/mnt/some/path/backupMessages.log\"\n      }\n    };\n    \n    var reportingClient = new reporting.Reporting(config);\n    \n    reportingClient.logMessage(\"topicHello\", {id: 27, text: \"Hello World\"});\n    \n    // if desired a callback can be passed to accept results, but this will be of limited use to most applications\n    reportingClient.logMessage(\"topicHello\", {id: 27, text: \"Hello World\"} , function (err, results) {\n      console.log(\"results: \" + results[0].handler + \", \" + results[0].result.body);\n    });\n",
  "readmeFilename": "ReadMe.txt",
  "_id": "fh-reportingclient@0.3.7",
  "_shasum": "a9ef03ec0b641f8cca778cce491765aec175b458",
  "_from": "https://registry.npmjs.org/fh-reportingclient/-/fh-reportingclient-0.3.7.tgz",
  "_resolved": "https://registry.npmjs.org/fh-reportingclient/-/fh-reportingclient-0.3.7.tgz"
}
